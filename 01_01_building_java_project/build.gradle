
// ==================== PLUGINS ===============================

//has to be first thing declared if have it
//Plugins are used for adding functionally to gradle
plugins {
    //imports the java plugin, which is natively shipped with gradle
    id "java"
    //import the application plugin
    id "application"
    id "com.dorongold.task-tree" version "2.1.0"
}

java {
    //telling gradle we need a version of 11 for compatibility with our source code
    sourceCompatibility(JavaVersion.VERSION_11)
}

//a task of the java plugin
compileJava {
    //stop the compilation if warning or error occurs
    //docs https://docs.gradle.org/current/dsl/org.gradle.api.tasks.compile.CompileOptions.html#org.gradle.api.tasks.compile.CompileOptions

        options.compilerArgs << "-Werror"
    //    options.compilerArgs << "-verbose"
}

jar {
    //this name task precedence over the rootProject.name in the settings gradle and the directory name
//    archivesBaseName = "test"
}

//have to configure the mainClass of the application plugin in order to run the application
application {
    mainClass = "com.linkedinlearning.calculator.Main"
}

// ==================== DEPENDENCIES ===============================
repositories {
    //tell gradle to look at maven central
    mavenCentral()
}

//Plugins are used for adding functionally to gradle
//Dependencies are used for adding functionality to src code
dependencies {
    implementation 'commons-cli:commons-cli:1.4'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'

    //adding in spring boot will add a large transitive dependency tree
    //implementation 'org.springframework.boot:org.springframework.boot.gradle.plugin:2.7.4'
}

//use JUnit 5, uses 4 by default
test {
    useJUnitPlatform()
    testLogging {
        events 'started', 'skipped', 'failed'
    }
}


// ================= GENERAL CONFIG ==========================
//this will be appended to the jar name
//version = '1.0.0'
//can define here or import from properties
version = versionFromProperties
